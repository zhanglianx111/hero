{
  "swaggerVersion": "1.2",
  "apiVersion": "v1beta3",
  "basePath": "https://127.0.0.1:6443",
  "resourcePath": "/api/v1beta3",
  "apis": [
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/bindings",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Binding",
      "nickname": "createBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Binding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/endpoints",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EndpointsList",
      "method": "GET",
      "summary": "list objects of kind Endpoints",
      "nickname": "listEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Endpoints",
      "nickname": "createEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Endpoints",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/endpoints",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EndpointsList",
      "method": "GET",
      "summary": "watch a list of Endpoints",
      "nickname": "watchEndpointslist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/endpoints/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Endpoints",
      "method": "GET",
      "summary": "read the specified Endpoints",
      "nickname": "readEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Endpoints",
      "nickname": "replaceEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Endpoints",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Endpoints",
      "nickname": "patchEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Endpoints",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Endpoints",
      "nickname": "deleteEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/endpoints/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Endpoints",
      "method": "GET",
      "summary": "watch a particular Endpoints",
      "nickname": "watchEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/endpoints",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EndpointsList",
      "method": "GET",
      "summary": "list objects of kind Endpoints",
      "nickname": "listEndpoints",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/endpoints",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EndpointsList",
      "method": "GET",
      "summary": "watch a list of Endpoints",
      "nickname": "watchEndpointslist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/events",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EventList",
      "method": "GET",
      "summary": "list objects of kind Event",
      "nickname": "listEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Event",
      "nickname": "createEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Event",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/events",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EventList",
      "method": "GET",
      "summary": "watch a list of Event",
      "nickname": "watchEventlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/events/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Event",
      "method": "GET",
      "summary": "read the specified Event",
      "nickname": "readEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Event",
      "nickname": "replaceEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Event",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Event",
      "nickname": "patchEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Event",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Event",
      "nickname": "deleteEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/events/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Event",
      "method": "GET",
      "summary": "watch a particular Event",
      "nickname": "watchEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/events",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EventList",
      "method": "GET",
      "summary": "list objects of kind Event",
      "nickname": "listEvent",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/events",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.EventList",
      "method": "GET",
      "summary": "watch a list of Event",
      "nickname": "watchEventlist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/limitranges",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRangeList",
      "method": "GET",
      "summary": "list objects of kind LimitRange",
      "nickname": "listLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a LimitRange",
      "nickname": "createLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.LimitRange",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/limitranges",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRangeList",
      "method": "GET",
      "summary": "watch a list of LimitRange",
      "nickname": "watchLimitRangelist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/limitranges/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRange",
      "method": "GET",
      "summary": "read the specified LimitRange",
      "nickname": "readLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified LimitRange",
      "nickname": "replaceLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.LimitRange",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified LimitRange",
      "nickname": "patchLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.LimitRange",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a LimitRange",
      "nickname": "deleteLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/limitranges/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRange",
      "method": "GET",
      "summary": "watch a particular LimitRange",
      "nickname": "watchLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/limitranges",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRangeList",
      "method": "GET",
      "summary": "list objects of kind LimitRange",
      "nickname": "listLimitRange",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/limitranges",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.LimitRangeList",
      "method": "GET",
      "summary": "watch a list of LimitRange",
      "nickname": "watchLimitRangelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.NamespaceList",
      "method": "GET",
      "summary": "list objects of kind Namespace",
      "nickname": "listNamespace",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Namespace",
      "nickname": "createNamespace",
      "parameters": [
       {
        "type": "v1beta3.Namespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.NamespaceList",
      "method": "GET",
      "summary": "watch a list of Namespace",
      "nickname": "watchNamespacelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Namespace",
      "method": "GET",
      "summary": "read the specified Namespace",
      "nickname": "readNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Namespace",
      "nickname": "replaceNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Namespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Namespace",
      "nickname": "patchNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Namespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Namespace",
      "nickname": "deleteNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Namespace",
      "method": "GET",
      "summary": "watch a particular Namespace",
      "nickname": "watchNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{name}/finalize",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Namespace",
      "nickname": "replaceNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Namespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{name}/status",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Namespace",
      "nickname": "replaceNamespace",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Namespace",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Namespace",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/nodes",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.NodeList",
      "method": "GET",
      "summary": "list objects of kind Node",
      "nickname": "listNode",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Node",
      "nickname": "createNode",
      "parameters": [
       {
        "type": "v1beta3.Node",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/nodes",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.NodeList",
      "method": "GET",
      "summary": "watch a list of Node",
      "nickname": "watchNodelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/nodes/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Node",
      "method": "GET",
      "summary": "read the specified Node",
      "nickname": "readNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Node",
      "nickname": "replaceNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Node",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Node",
      "nickname": "patchNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Node",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Node",
      "nickname": "deleteNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/nodes/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Node",
      "method": "GET",
      "summary": "watch a particular Node",
      "nickname": "watchNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/redirect/nodes/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Node",
      "nickname": "redirectNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/nodes/{name}/{path:*}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Node",
      "nickname": "proxyGETNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Node",
      "nickname": "proxyPUTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Node",
      "nickname": "proxyPOSTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Node",
      "nickname": "proxyDELETENode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/nodes/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Node",
      "nickname": "proxyGETNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Node",
      "nickname": "proxyPUTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Node",
      "nickname": "proxyPOSTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Node",
      "nickname": "proxyDELETENode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/pods",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.PodList",
      "method": "GET",
      "summary": "list objects of kind Pod",
      "nickname": "listPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Pod",
      "nickname": "createPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/pods",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.PodList",
      "method": "GET",
      "summary": "watch a list of Pod",
      "nickname": "watchPodlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/pods/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Pod",
      "method": "GET",
      "summary": "read the specified Pod",
      "nickname": "readPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Pod",
      "nickname": "replacePod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Pod",
      "nickname": "patchPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Pod",
      "nickname": "deletePod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/pods/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Pod",
      "method": "GET",
      "summary": "watch a particular Pod",
      "nickname": "watchPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/redirect/namespaces/{namespaces}/pods/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Pod",
      "nickname": "redirectPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/namespaces/{namespaces}/pods/{name}/{path:*}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Pod",
      "nickname": "proxyGETPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Pod",
      "nickname": "proxyPUTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Pod",
      "nickname": "proxyPOSTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Pod",
      "nickname": "proxyDELETEPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/namespaces/{namespaces}/pods/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Pod",
      "nickname": "proxyGETPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Pod",
      "nickname": "proxyPUTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Pod",
      "nickname": "proxyPOSTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Pod",
      "nickname": "proxyDELETEPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/pods",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.PodList",
      "method": "GET",
      "summary": "list objects of kind Pod",
      "nickname": "listPod",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/pods",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.PodList",
      "method": "GET",
      "summary": "watch a list of Pod",
      "nickname": "watchPodlist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/pods/{name}/binding",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Binding",
      "nickname": "createBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Binding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/pods/{name}/status",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Pod",
      "nickname": "replacePod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/replicationcontrollers",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationControllerList",
      "method": "GET",
      "summary": "list objects of kind ReplicationController",
      "nickname": "listReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a ReplicationController",
      "nickname": "createReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ReplicationController",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/replicationcontrollers",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationControllerList",
      "method": "GET",
      "summary": "watch a list of ReplicationController",
      "nickname": "watchReplicationControllerlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/replicationcontrollers/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationController",
      "method": "GET",
      "summary": "read the specified ReplicationController",
      "nickname": "readReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified ReplicationController",
      "nickname": "replaceReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ReplicationController",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified ReplicationController",
      "nickname": "patchReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ReplicationController",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a ReplicationController",
      "nickname": "deleteReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/replicationcontrollers/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationController",
      "method": "GET",
      "summary": "watch a particular ReplicationController",
      "nickname": "watchReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/replicationcontrollers",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationControllerList",
      "method": "GET",
      "summary": "list objects of kind ReplicationController",
      "nickname": "listReplicationController",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/replicationcontrollers",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ReplicationControllerList",
      "method": "GET",
      "summary": "watch a list of ReplicationController",
      "nickname": "watchReplicationControllerlist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/resourcequotas",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuotaList",
      "method": "GET",
      "summary": "list objects of kind ResourceQuota",
      "nickname": "listResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a ResourceQuota",
      "nickname": "createResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/resourcequotas",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuotaList",
      "method": "GET",
      "summary": "watch a list of ResourceQuota",
      "nickname": "watchResourceQuotalist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/resourcequotas/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuota",
      "method": "GET",
      "summary": "read the specified ResourceQuota",
      "nickname": "readResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified ResourceQuota",
      "nickname": "replaceResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified ResourceQuota",
      "nickname": "patchResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a ResourceQuota",
      "nickname": "deleteResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "*v1beta3.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/resourcequotas/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuota",
      "method": "GET",
      "summary": "watch a particular ResourceQuota",
      "nickname": "watchResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/resourcequotas",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuotaList",
      "method": "GET",
      "summary": "list objects of kind ResourceQuota",
      "nickname": "listResourceQuota",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/resourcequotas",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ResourceQuotaList",
      "method": "GET",
      "summary": "watch a list of ResourceQuota",
      "nickname": "watchResourceQuotalist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/resourcequotas/{name}/status",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified ResourceQuota",
      "nickname": "replaceResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/secrets",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.SecretList",
      "method": "GET",
      "summary": "list objects of kind Secret",
      "nickname": "listSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Secret",
      "nickname": "createSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Secret",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/secrets",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.SecretList",
      "method": "GET",
      "summary": "watch a list of Secret",
      "nickname": "watchSecretlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/secrets/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Secret",
      "method": "GET",
      "summary": "read the specified Secret",
      "nickname": "readSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Secret",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Secret",
      "nickname": "replaceSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Secret",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Secret",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Secret",
      "nickname": "patchSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Secret",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Secret",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Secret",
      "nickname": "deleteSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Secret",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/secrets/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Secret",
      "method": "GET",
      "summary": "watch a particular Secret",
      "nickname": "watchSecret",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Secret",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/secrets",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.SecretList",
      "method": "GET",
      "summary": "list objects of kind Secret",
      "nickname": "listSecret",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/secrets",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.SecretList",
      "method": "GET",
      "summary": "watch a list of Secret",
      "nickname": "watchSecretlist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/services",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ServiceList",
      "method": "GET",
      "summary": "list objects of kind Service",
      "nickname": "listService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Service",
      "nickname": "createService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Service",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/services",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ServiceList",
      "method": "GET",
      "summary": "watch a list of Service",
      "nickname": "watchServicelist",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/namespaces/{namespaces}/services/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Service",
      "method": "GET",
      "summary": "read the specified Service",
      "nickname": "readService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "replace the specified Service",
      "nickname": "replaceService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Service",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PATCH",
      "summary": "partially update the specified Service",
      "nickname": "patchService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta3.Service",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Service",
      "nickname": "deleteService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/namespaces/{namespaces}/services/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.Service",
      "method": "GET",
      "summary": "watch a particular Service",
      "nickname": "watchService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/redirect/namespaces/{namespaces}/services/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Service",
      "nickname": "redirectService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/namespaces/{namespaces}/services/{name}/{path:*}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Service",
      "nickname": "proxyGETService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Service",
      "nickname": "proxyPUTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Service",
      "nickname": "proxyPOSTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Service",
      "nickname": "proxyDELETEService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/proxy/namespaces/{namespaces}/services/{name}",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Service",
      "nickname": "proxyGETService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Service",
      "nickname": "proxyPUTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Service",
      "nickname": "proxyPOSTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Service",
      "nickname": "proxyDELETEService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespaces",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/services",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ServiceList",
      "method": "GET",
      "summary": "list objects of kind Service",
      "nickname": "listService",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta3/watch/services",
    "description": "API at /api/v1beta3 version v1beta3",
    "operations": [
     {
      "type": "v1beta3.ServiceList",
      "method": "GET",
      "summary": "watch a list of Service",
      "nickname": "watchServicelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   }
  ],
  "models": {
   "*v1beta3.DeleteOptions": {
    "id": "*v1beta3.DeleteOptions",
    "properties": {}
   },
   "v1beta3.Binding": {
    "id": "v1beta3.Binding",
    "required": [
     "target"
    ],
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "target": {
      "$ref": "v1beta3.ObjectReference",
      "description": "an object to bind to"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.Capabilities": {
    "id": "v1beta3.Capabilities",
    "properties": {
     "add": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.CapabilityType"
      },
      "description": "added capabilities"
     },
     "drop": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.CapabilityType"
      },
      "description": "droped capabilities"
     }
    }
   },
   "v1beta3.CapabilityType": {
    "id": "v1beta3.CapabilityType",
    "properties": {}
   },
   "v1beta3.Container": {
    "id": "v1beta3.Container",
    "required": [
     "name",
     "image",
     "imagePullPolicy"
    ],
    "properties": {
     "capabilities": {
      "$ref": "v1beta3.Capabilities",
      "description": "capabilities for container; cannot be updated"
     },
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "command argv array; not executed within a shell; defaults to entrypoint or command in the image; cannot be updated"
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.EnvVar"
      },
      "description": "list of environment variables to set in the container; cannot be updated"
     },
     "image": {
      "type": "string",
      "description": "Docker image name"
     },
     "imagePullPolicy": {
      "$ref": "v1beta3.PullPolicy",
      "description": "image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise; cannot be updated"
     },
     "lifecycle": {
      "$ref": "v1beta3.Lifecycle",
      "description": "actions that the management system should take in response to container lifecycle events; cannot be updated"
     },
     "livenessProbe": {
      "$ref": "v1beta3.Probe",
      "description": "periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated"
     },
     "name": {
      "type": "string",
      "description": "name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated"
     },
     "ports": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.ContainerPort"
      },
      "description": "list of ports to expose from the container; cannot be updated"
     },
     "privileged": {
      "type": "boolean",
      "description": "whether or not the container is granted privileged status; defaults to false; cannot be updated"
     },
     "readinessProbe": {
      "$ref": "v1beta3.Probe",
      "description": "periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated"
     },
     "resources": {
      "$ref": "v1beta3.ResourceRequirements",
      "description": "Compute Resources required by this container; cannot be updated"
     },
     "terminationMessagePath": {
      "type": "string",
      "description": "path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated"
     },
     "volumeMounts": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.VolumeMount"
      },
      "description": "pod volumes to mount into the container's filesyste; cannot be updated"
     },
     "workingDir": {
      "type": "string",
      "description": "container's working directory; defaults to image's default; cannot be updated"
     }
    }
   },
   "v1beta3.ContainerPort": {
    "id": "v1beta3.ContainerPort",
    "required": [
     "containerPort"
    ],
    "properties": {
     "containerPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the pod's IP address"
     },
     "hostIP": {
      "type": "string",
      "description": "host IP to bind the port to"
     },
     "hostPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the host; most containers do not need this"
     },
     "name": {
      "type": "string",
      "description": "name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod"
     },
     "protocol": {
      "$ref": "v1beta3.Protocol",
      "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
     }
    }
   },
   "v1beta3.Endpoint": {
    "id": "v1beta3.Endpoint",
    "required": [
     "ip",
     "port"
    ],
    "properties": {
     "ip": {
      "type": "string",
      "description": "IP of this endpoint"
     },
     "port": {
      "type": "integer",
      "format": "int32",
      "description": "destination port of this endpoint"
     },
     "targetRef": {
      "$ref": "v1beta3.ObjectReference",
      "description": "reference to object providing the endpoint"
     }
    }
   },
   "v1beta3.Endpoints": {
    "id": "v1beta3.Endpoints",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "endpoints": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Endpoint"
      },
      "description": "list of endpoints corresponding to a service"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "protocol": {
      "$ref": "v1beta3.Protocol",
      "description": "IP protocol for endpoint ports; must be UDP or TCP; TCP if unspecified"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.EndpointsList": {
    "id": "v1beta3.EndpointsList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Endpoints"
      },
      "description": "list of endpoints"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.EnvVar": {
    "id": "v1beta3.EnvVar",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the environment variable; must be a C_IDENTIFIER"
     },
     "value": {
      "type": "string",
      "description": "value of the environment variable; defaults to empty string"
     }
    }
   },
   "v1beta3.Event": {
    "id": "v1beta3.Event",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "count": {
      "type": "integer",
      "format": "int32",
      "description": "the number of times this event has occurred"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "firstTimestamp": {
      "type": "string",
      "description": "the time at which the event was first recorded"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "involvedObject": {
      "$ref": "v1beta3.ObjectReference",
      "description": "object this event is about"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "lastTimestamp": {
      "type": "string",
      "description": "the time at which the most recent occurance of this event was recorded"
     },
     "message": {
      "type": "string",
      "description": "human-readable description of the status of this operation"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "reason": {
      "type": "string",
      "description": "short, machine understandable string that gives the reason for the transition into the object's current status"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "source": {
      "$ref": "v1beta3.EventSource",
      "description": "component reporting this event"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.EventList": {
    "id": "v1beta3.EventList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Event"
      },
      "description": "list of events"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.EventSource": {
    "id": "v1beta3.EventSource",
    "properties": {
     "component": {
      "type": "string",
      "description": "component that generated the event"
     },
     "host": {
      "type": "string",
      "description": "name of the host where the event is generated"
     }
    }
   },
   "v1beta3.ExecAction": {
    "id": "v1beta3.ExecAction",
    "properties": {
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy"
     }
    }
   },
   "v1beta3.FinalizerName": {
    "id": "v1beta3.FinalizerName",
    "properties": {}
   },
   "v1beta3.HTTPGetAction": {
    "id": "v1beta3.HTTPGetAction",
    "properties": {
     "host": {
      "type": "string",
      "description": "hostname to connect to; defaults to pod IP"
     },
     "path": {
      "type": "string",
      "description": "path to access on the HTTP server"
     },
     "port": {
      "type": "string",
      "description": "number or name of the port to access on the container"
     }
    }
   },
   "v1beta3.Handler": {
    "id": "v1beta3.Handler",
    "properties": {
     "exec": {
      "$ref": "v1beta3.ExecAction",
      "description": "exec-based handler"
     },
     "httpGet": {
      "$ref": "v1beta3.HTTPGetAction",
      "description": "HTTP-based handler"
     },
     "tcpSocket": {
      "$ref": "v1beta3.TCPSocketAction",
      "description": "TCP-based handler; TCP hooks not yet supported"
     }
    }
   },
   "v1beta3.Lifecycle": {
    "id": "v1beta3.Lifecycle",
    "properties": {
     "postStart": {
      "$ref": "v1beta3.Handler",
      "description": "called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes"
     },
     "preStop": {
      "$ref": "v1beta3.Handler",
      "description": "called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes"
     }
    }
   },
   "v1beta3.LimitRange": {
    "id": "v1beta3.LimitRange",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.LimitRangeSpec",
      "description": "spec defines the limits enforced; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.LimitRangeItem": {
    "id": "v1beta3.LimitRangeItem",
    "properties": {
     "max": {
      "$ref": "v1beta3.ResourceList",
      "description": "max usage constraints on this kind by resource name"
     },
     "min": {
      "$ref": "v1beta3.ResourceList",
      "description": "min usage constraints on this kind by resource name"
     },
     "type": {
      "$ref": "v1beta3.LimitType",
      "description": "type of resource that this limit applies to"
     }
    }
   },
   "v1beta3.LimitRangeList": {
    "id": "v1beta3.LimitRangeList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.LimitRange"
      },
      "description": "items is a list of LimitRange objects"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.LimitRangeSpec": {
    "id": "v1beta3.LimitRangeSpec",
    "required": [
     "limits"
    ],
    "properties": {
     "limits": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.LimitRangeItem"
      },
      "description": "limits is the list of LimitRangeItem objects that are enforced"
     }
    }
   },
   "v1beta3.Namespace": {
    "id": "v1beta3.Namespace",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.NamespaceSpec",
      "description": "spec defines the behavior of the Namespace; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.NamespaceStatus",
      "description": "status describes the current status of a Namespace; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.NamespaceList": {
    "id": "v1beta3.NamespaceList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Namespace"
      },
      "description": "items is the list of Namespace objects in the list"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.NamespaceSpec": {
    "id": "v1beta3.NamespaceSpec",
    "properties": {
     "finalizers": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.FinalizerName"
      },
      "description": "an opaque list of values that must be empty to permanently remove object from storage"
     }
    }
   },
   "v1beta3.NamespaceStatus": {
    "id": "v1beta3.NamespaceStatus",
    "properties": {
     "phase": {
      "$ref": "v1beta3.NamespacePhase",
      "description": "phase is the current lifecycle phase of the namespace"
     }
    }
   },
   "v1beta3.Node": {
    "id": "v1beta3.Node",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.NodeSpec",
      "description": "specification of a node; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.NodeStatus",
      "description": "most recently observed status of the node; populated by the system, read-only; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.NodeAddress": {
    "id": "v1beta3.NodeAddress",
    "required": [
     "type",
     "address"
    ],
    "properties": {
     "address": {
      "type": "string"
     },
     "type": {
      "$ref": "v1beta3.NodeAddressType"
     }
    }
   },
   "v1beta3.NodeCondition": {
    "id": "v1beta3.NodeCondition",
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "lastProbeTime": {
      "type": "string",
      "description": "last time the condition was probed"
     },
     "lastTransitionTime": {
      "type": "string",
      "description": "last time the condition transit from one status to another"
     },
     "message": {
      "type": "string",
      "description": "human readable message indicating details about last transition"
     },
     "reason": {
      "type": "string",
      "description": "(brief) reason for the condition's last transition"
     },
     "status": {
      "$ref": "v1beta3.ConditionStatus",
      "description": "status of the condition, one of Full, None, Unknown"
     },
     "type": {
      "$ref": "v1beta3.NodeConditionType",
      "description": "type of node condition, one of Reachable, Ready"
     }
    }
   },
   "v1beta3.NodeList": {
    "id": "v1beta3.NodeList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Node"
      },
      "description": "list of nodes"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.NodeSpec": {
    "id": "v1beta3.NodeSpec",
    "properties": {
     "capacity": {
      "$ref": "v1beta3.ResourceList",
      "description": "compute resource capacity of the node; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/resources.md"
     },
     "externalID": {
      "type": "string",
      "description": "external ID assigned to the node by some machine database (e.g. a cloud provider)"
     },
     "podCIDR": {
      "type": "string",
      "description": "pod IP range assigned to the node"
     },
     "unschedulable": {
      "type": "boolean",
      "description": "disable pod scheduling on the node"
     }
    }
   },
   "v1beta3.NodeStatus": {
    "id": "v1beta3.NodeStatus",
    "properties": {
     "addresses": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.NodeAddress"
      },
      "description": "list of addresses reachable to the node"
     },
     "conditions": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.NodeCondition"
      },
      "description": "list of node conditions observed"
     },
     "nodeInfo": {
      "$ref": "v1beta3.NodeSystemInfo"
     },
     "phase": {
      "$ref": "v1beta3.NodePhase",
      "description": "most recently observed lifecycle phase of the node"
     }
    }
   },
   "v1beta3.NodeSystemInfo": {
    "id": "v1beta3.NodeSystemInfo",
    "required": [
     "machineID",
     "systemUUID"
    ],
    "properties": {
     "machineID": {
      "type": "string"
     },
     "systemUUID": {
      "type": "string"
     }
    }
   },
   "v1beta3.ObjectReference": {
    "id": "v1beta3.ObjectReference",
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "API version of the referent"
     },
     "fieldPath": {
      "type": "string",
      "description": "if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]"
     },
     "kind": {
      "type": "string",
      "description": "kind of the referent"
     },
     "name": {
      "type": "string",
      "description": "name of the referent"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the referent"
     },
     "resourceVersion": {
      "type": "string",
      "description": "specific resourceVersion to which this reference is made, if any: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "uid of the referent"
     }
    }
   },
   "v1beta3.Pod": {
    "id": "v1beta3.Pod",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.PodSpec",
      "description": "specification of the desired behavior of the pod; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.PodStatus",
      "description": "most recently observed status of the pod; populated by the system, read-only; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.PodCondition": {
    "id": "v1beta3.PodCondition",
    "required": [
     "type",
     "status"
    ],
    "properties": {
     "status": {
      "$ref": "v1beta3.ConditionStatus",
      "description": "status of the condition, one of Full, None, Unknown"
     },
     "type": {
      "$ref": "v1beta3.PodConditionType",
      "description": "kind of the condition"
     }
    }
   },
   "v1beta3.PodList": {
    "id": "v1beta3.PodList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Pod"
      },
      "description": "list of pods"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.PodSpec": {
    "id": "v1beta3.PodSpec",
    "required": [
     "volumes",
     "containers"
    ],
    "properties": {
     "containers": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Container"
      },
      "description": "list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod"
     },
     "dnsPolicy": {
      "$ref": "v1beta3.DNSPolicy",
      "description": "DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default'"
     },
     "host": {
      "type": "string",
      "description": "host requested for this pod"
     },
     "hostNetwork": {
      "type": "boolean",
      "description": "host networking requested for this pod"
     },
     "nodeSelector": {
      "$ref": "v1beta3.PodSpec.nodeSelector",
      "description": "selector which must match a node's labels for the pod to be scheduled on that node"
     },
     "restartPolicy": {
      "$ref": "v1beta3.RestartPolicy",
      "description": "restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever"
     },
     "volumes": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Volume"
      },
      "description": "list of volumes that can be mounted by containers belonging to the pod"
     }
    }
   },
   "v1beta3.PodSpec.nodeSelector": {
    "id": "v1beta3.PodSpec.nodeSelector",
    "properties": {}
   },
   "v1beta3.PodStatus": {
    "id": "v1beta3.PodStatus",
    "properties": {
     "Condition": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.PodCondition"
      },
      "description": "current service state of pod"
     },
     "host": {
      "type": "string",
      "description": "host to which the pod is assigned; empty if not yet scheduled; cannot be updated"
     },
     "hostIP": {
      "type": "string",
      "description": "IP address of the host to which the pod is assigned; empty if not yet scheduled"
     },
     "info": {
      "$ref": "v1beta3.PodInfo",
      "description": "map of container name to container status"
     },
     "message": {
      "type": "string",
      "description": "human readable message indicating details about why the pod is in this condition"
     },
     "phase": {
      "$ref": "v1beta3.PodPhase",
      "description": "current condition of the pod."
     },
     "podIP": {
      "type": "string",
      "description": "IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated"
     }
    }
   },
   "v1beta3.PodTemplateSpec": {
    "id": "v1beta3.PodTemplateSpec",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.PodSpec",
      "description": "specification of the desired behavior of the pod; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.Probe": {
    "id": "v1beta3.Probe",
    "properties": {
     "exec": {
      "$ref": "v1beta3.ExecAction",
      "description": "exec-based handler"
     },
     "httpGet": {
      "$ref": "v1beta3.HTTPGetAction",
      "description": "HTTP-based handler"
     },
     "initialDelaySeconds": {
      "type": "integer",
      "format": "int64",
      "description": "number of seconds after the container has started before liveness probes are initiated"
     },
     "tcpSocket": {
      "$ref": "v1beta3.TCPSocketAction",
      "description": "TCP-based handler; TCP hooks not yet supported"
     },
     "timeoutSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "number of seconds after which liveness probes timeout; defaults to 1 second"
     }
    }
   },
   "v1beta3.ReplicationController": {
    "id": "v1beta3.ReplicationController",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.ReplicationControllerSpec",
      "description": "specification of the desired behavior of the replication controller; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.ReplicationControllerStatus",
      "description": "most recently observed status of the replication controller; populated by the system, read-only; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.ReplicationControllerList": {
    "id": "v1beta3.ReplicationControllerList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.ReplicationController"
      },
      "description": "list of replication controllers"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.ReplicationControllerSpec": {
    "id": "v1beta3.ReplicationControllerSpec",
    "required": [
     "replicas"
    ],
    "properties": {
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "number of replicas desired"
     },
     "selector": {
      "$ref": "v1beta3.ReplicationControllerSpec.selector",
      "description": "label keys and values that must match in order to be controlled by this replication controller"
     },
     "template": {
      "$ref": "v1beta3.PodTemplateSpec",
      "description": "object that describes the pod that will be created if insufficient replicas are detected; takes precendence over templateRef"
     },
     "templateRef": {
      "$ref": "v1beta3.ObjectReference",
      "description": "reference to an object that describes the pod that will be created if insufficient replicas are detected"
     }
    }
   },
   "v1beta3.ReplicationControllerSpec.selector": {
    "id": "v1beta3.ReplicationControllerSpec.selector",
    "properties": {}
   },
   "v1beta3.ReplicationControllerStatus": {
    "id": "v1beta3.ReplicationControllerStatus",
    "required": [
     "replicas"
    ],
    "properties": {
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "most recently oberved number of replicas"
     }
    }
   },
   "v1beta3.ResourceQuota": {
    "id": "v1beta3.ResourceQuota",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.ResourceQuotaSpec",
      "description": "spec defines the desired quota; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.ResourceQuotaStatus",
      "description": "status defines the actual enforced quota and current usage; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.ResourceQuotaList": {
    "id": "v1beta3.ResourceQuotaList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.ResourceQuota"
      },
      "description": "items is a list of ResourceQuota objects"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.ResourceQuotaSpec": {
    "id": "v1beta3.ResourceQuotaSpec",
    "properties": {
     "hard": {
      "$ref": "v1beta3.ResourceList",
      "description": "hard is the set of desired hard limits for each named resource"
     }
    }
   },
   "v1beta3.ResourceQuotaStatus": {
    "id": "v1beta3.ResourceQuotaStatus",
    "properties": {
     "hard": {
      "$ref": "v1beta3.ResourceList",
      "description": "hard is the set of enforced hard limits for each named resource"
     },
     "used": {
      "$ref": "v1beta3.ResourceList",
      "description": "used is the current observed total usage of the resource in the namespace"
     }
    }
   },
   "v1beta3.ResourceRequirements": {
    "id": "v1beta3.ResourceRequirements",
    "properties": {
     "limits": {
      "$ref": "v1beta3.ResourceList",
      "description": "Maximum amount of compute resources allowed"
     },
     "requests": {
      "$ref": "v1beta3.ResourceList",
      "description": "Minimum amount of resources requested"
     }
    }
   },
   "v1beta3.Secret": {
    "id": "v1beta3.Secret",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "data": {
      "$ref": "v1beta3.Secret.data",
      "description": "data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN.  Each value must be a base64 encoded string"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "type": {
      "$ref": "v1beta3.SecretType",
      "description": "type facilitates programmatic handling of secret data"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.Secret.data": {
    "id": "v1beta3.Secret.data",
    "properties": {}
   },
   "v1beta3.SecretList": {
    "id": "v1beta3.SecretList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Secret"
      },
      "description": "items is a list of secret objects"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.Service": {
    "id": "v1beta3.Service",
    "properties": {
     "annotations": {
      "$ref": "v1beta3.ObjectMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists"
     },
     "deletionTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "labels": {
      "$ref": "v1beta3.ObjectMeta.labels",
      "description": "map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services"
     },
     "name": {
      "type": "string",
      "description": "string that identifies an object. Must be unique within a namespace; cannot be updated"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the object; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     },
     "spec": {
      "$ref": "v1beta3.ServiceSpec",
      "description": "specification of the desired behavior of the service; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "status": {
      "$ref": "v1beta3.ServiceStatus",
      "description": "most recently observed status of the service; populated by the system, read-only; https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#spec-and-status"
     },
     "uid": {
      "$ref": "types.UID",
      "description": "unique UUID across space and time; populated by the system; read-only"
     }
    }
   },
   "v1beta3.ServiceList": {
    "id": "v1beta3.ServiceList",
    "required": [
     "items"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1beta3.Service"
      },
      "description": "list of services"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase; cannot be updated"
     },
     "resourceVersion": {
      "type": "string",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/api-conventions.md#concurrency-control-and-consistency"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object; populated by the system, read-only"
     }
    }
   },
   "v1beta3.ServiceSpec": {
    "id": "v1beta3.ServiceSpec",
    "required": [
     "port",
     "selector",
     "portalIP"
    ],
    "properties": {
     "createExternalLoadBalancer": {
      "type": "boolean",
      "description": "set up a cloud-provider-specific load balancer on an external IP"
     },
     "port": {
      "type": "integer",
      "format": "int32",
      "description": "port exposed by the service"
     },
     "portalIP": {
      "type": "string"
     },
     "protocol": {
      "$ref": "v1beta3.Protocol",
      "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
     },
     "publicIPs": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "externally visible IPs (e.g. load balancers) that should be proxied to this service"
     },
     "selector": {
      "$ref": "v1beta3.ServiceSpec.selector",
      "description": "label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified"
     },
     "sessionAffinity": {
      "$ref": "v1beta3.AffinityType",
      "description": "enable client IP based session affinity; must be ClientIP or None; defaults to None"
     },
     "targetPort": {
      "type": "string",
      "description": "number or name of the port to access on the containers belonging to pods targeted by the service; defaults to the container's first open port"
     }
    }
   },
   "v1beta3.ServiceSpec.selector": {
    "id": "v1beta3.ServiceSpec.selector",
    "properties": {}
   },
   "v1beta3.ServiceStatus": {
    "id": "v1beta3.ServiceStatus",
    "properties": {}
   },
   "v1beta3.TCPSocketAction": {
    "id": "v1beta3.TCPSocketAction",
    "properties": {
     "port": {
      "type": "string",
      "description": "number of name of the port to access on the container"
     }
    }
   },
   "v1beta3.Volume": {
    "id": "v1beta3.Volume",
    "required": [
     "name",
     "hostPath",
     "emptyDir",
     "gcePersistentDisk",
     "gitRepo",
     "secret",
     "nfs"
    ],
    "properties": {
     "emptyDir": {
      "$ref": "v1beta3.EmptyDirVolumeSource",
      "description": "temporary directory that shares a pod's lifetime"
     },
     "gcePersistentDisk": {
      "$ref": "v1beta3.GCEPersistentDiskVolumeSource",
      "description": "GCE disk resource attached to the host machine on demand"
     },
     "gitRepo": {
      "$ref": "v1beta3.GitRepoVolumeSource",
      "description": "git repository at a particular revision"
     },
     "hostPath": {
      "$ref": "v1beta3.HostPathVolumeSource",
      "description": "pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host"
     },
     "name": {
      "type": "string",
      "description": "volume name; must be a DNS_LABEL and unique within the pod"
     },
     "nfs": {
      "$ref": "v1beta3.NFSVolumeSource",
      "description": "NFS volume that will be mounted in the host machine"
     },
     "secret": {
      "$ref": "v1beta3.SecretVolumeSource",
      "description": "secret to populate volume"
     }
    }
   },
   "v1beta3.VolumeMount": {
    "id": "v1beta3.VolumeMount",
    "required": [
     "name",
     "mountPath"
    ],
    "properties": {
     "mountPath": {
      "type": "string",
      "description": "path within the container at which the volume should be mounted"
     },
     "name": {
      "type": "string",
      "description": "name of the volume to mount"
     },
     "readOnly": {
      "type": "boolean",
      "description": "mounted read-only if true, read-write otherwise (false or unspecified)"
     }
    }
   }
  }
 }